/* global __firebase_config */
import React, { useState, useEffect, useCallback } from 'react';
import { Loader, Users, Clock, Trash2, CheckCircle, AlertTriangle, RefreshCw } from 'lucide-react';

// Render„ÅÆAPI„Éô„Éº„ÇπURL„ÄÇÂêå‰∏Ä„Ç™„É™„Ç∏„É≥„ÅÆ„Åü„ÇÅÁõ∏ÂØæ„Éë„Çπ„ÇÇÂèØËÉΩ„Åß„Åô„Åå„ÄÅÂøµ„ÅÆ„Åü„ÇÅwindow.location.origin„Çí‰ΩøÁî®
const API_BASE_URL = window.location.origin + '/api'; 

// üö® „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„ÅÆÁßòÂØÜÈçµ„ÅØ„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„Éâ„Å´Èú≤Âá∫„Åï„Åõ„Å¶„ÅØ„ÅÑ„Åë„Å™„ÅÑ„Åü„ÇÅ„ÄÅ
// ÂÆüÈöõ„Å´„ÅØAPIÂÅ¥„ÅßË™çË®º„ÇíË°å„ÅÜÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Åì„Åì„Åß„ÅØ„ÉÄ„Éü„Éº„ÅÆAPI_SECRET„Çí‰ΩøÁî®„Åó„Åæ„Åô„Åå„ÄÅ
// „Çµ„Éº„Éê„ÉºÂÅ¥„Åß„Éà„Éº„ÇØ„É≥/„Çª„ÉÉ„Ç∑„Éß„É≥Ë™çË®º„Å´Âàá„ÇäÊõø„Åà„Çã„Åì„Å®„ÇíÂº∑„ÅèÊé®Â•®„Åó„Åæ„Åô„ÄÇ
const API_SECRET = 'dummy-secret';

// --- Component: Custom Modal (alert/confirm„ÅÆ‰ª£„Çè„Çä) ---

const CustomModal = ({ title, message, isOpen, onClose, onConfirm, isConfirmation = false, isError = false }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-sm overflow-hidden transform transition-all">
                <div className="p-6">
                    <div className="flex items-center mb-4">
                        {isError ? (
                            <AlertTriangle className="h-6 w-6 text-red-500 mr-3" />
                        ) : isConfirmation ? (
                            <AlertTriangle className="h-6 w-6 text-amber-500 mr-3" />
                        ) : (
                            <CheckCircle className="h-6 w-6 text-blue-500 mr-3" />
                        )}
                        <h3 className="text-xl font-bold text-gray-800">{title}</h3>
                    </div>
                    <p className="text-gray-600 whitespace-pre-wrap border-t pt-4">{message}</p>
                </div>
                <div className="bg-gray-50 px-6 py-4 flex justify-end space-x-3">
                    {isConfirmation && (
                        <button
                            onClick={onClose}
                            className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg font-semibold hover:bg-gray-300 transition"
                        >
                            „Ç≠„É£„É≥„Çª„É´
                        </button>
                    )}
                    <button
                        onClick={() => { if (onConfirm) onConfirm(); onClose(); }}
                        className={`px-4 py-2 text-white rounded-lg font-semibold shadow-md transition ${
                            isError || isConfirmation ? 'bg-red-600 hover:bg-red-700' : 'bg-blue-600 hover:bg-blue-700'
                        }`}
                    >
                        {isConfirmation ? 'ÂÆüË°å' : 'OK'}
                    </button>
                </div>
            </div>
        </div>
    );
};

// „Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊó•Êú¨Ë™ûÂêç„Å´Â§âÊèõ„Åô„Çã„Éò„É´„Éë„Éº
const STATUS_MAP = {
    'waiting': 'ÂæÖÊ©ü‰∏≠',
    'called': 'Âëº„Å≥Âá∫„Åó‰∏≠',
    'seatEnter': 'ÁùÄÂ∏≠Ê∏à„Åø',
    'missed': 'ÂëºÂá∫ÊúüÈôêÂàá„Çå',
    'done': 'ÂÆå‰∫Ü'
};

// ‰∫àÁ¥Ñ„Ç¢„Ç§„ÉÜ„É†Ë°å„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const ReservationRow = React.memo(({ reservation, changeStatus, deleteReservation }) => {
    const statusText = STATUS_MAP[reservation.status] || reservation.status;
    
    let statusColor = 'bg-gray-200 text-gray-800';
    if (reservation.status === 'called') statusColor = 'bg-red-100 text-red-800 font-bold';
    if (reservation.status === 'waiting') statusColor = 'bg-amber-100 text-amber-800';
    if (reservation.status === 'seatEnter') statusColor = 'bg-green-100 text-green-800';
    if (reservation.status === 'done' || reservation.status === 'missed') statusColor = 'bg-indigo-100 text-indigo-800';

    const formatDate = (timestamp) => {
        if (!timestamp) return '---';
        const date = new Date(timestamp._seconds * 1000);
        return date.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });
    };

    return (
        <tr className="hover:bg-gray-50 transition duration-150">
            <td className="px-3 py-2 whitespace-nowrap text-sm font-medium text-amber-700 border-r">{reservation.number || '---'}</td>
            <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">{reservation.group}</td>
            <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900">{reservation.name}</td>
            <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">{reservation.people}‰∫∫</td>
            <td className="px-3 py-2 whitespace-nowrap">
                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColor}`}>
                    {statusText}
                </span>
            </td>
            <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-500">{formatDate(reservation.createdAt)}</td>
            <td className="px-3 py-2 whitespace-nowrap text-sm font-medium">
                <div className="flex space-x-1">
                    {reservation.status === 'waiting' && (
                        <button
                            onClick={() => changeStatus(reservation.id, 'called')}
                            className="text-white bg-red-600 hover:bg-red-700 px-2 py-1 rounded text-xs font-semibold shadow-sm transition"
                        >
                            ÂëºÂá∫
                        </button>
                    )}
                    {reservation.status === 'called' && (
                        <>
                            <button
                                onClick={() => changeStatus(reservation.id, 'seatEnter')}
                                className="text-white bg-green-600 hover:bg-green-700 px-2 py-1 rounded text-xs font-semibold shadow-sm transition"
                            >
                                ÂÖ•Â†¥
                            </button>
                            <button
                                onClick={() => changeStatus(reservation.id, 'missed')}
                                className="text-white bg-red-400 hover:bg-red-500 px-2 py-1 rounded text-xs font-semibold transition"
                            >
                                ÂëºÂá∫Ê∏à
                            </button>
                        </>
                    )}
                    {reservation.status === 'seatEnter' && (
                        <button
                            onClick={() => changeStatus(reservation.id, 'done')}
                            className="text-white bg-indigo-600 hover:bg-indigo-700 px-2 py-1 rounded text-xs font-semibold shadow-sm transition"
                        >
                            ÂÆå‰∫Ü
                        </button>
                    )}
                    <button
                        onClick={() => deleteReservation(reservation.id)}
                        className="text-gray-600 hover:text-red-600 p-1 rounded transition"
                        title="‰∫àÁ¥Ñ„ÇíÂâäÈô§"
                    >
                        <Trash2 className="w-4 h-4" />
                    </button>
                </div>
            </td>
        </tr>
    );
});

// --- Main Admin Component ---

export default function Admin() {
    const [reservationList, setReservationList] = useState([]);
    const [summary, setSummary] = useState({ groups: '---', people: '---' });
    const [listLoading, setListLoading] = useState(false);
    const [modal, setModal] = useState({ isOpen: false, title: '', message: '', isConfirmation: false, isError: false, onConfirm: null });

    const openModal = (title, message, isError = false) => setModal({ isOpen: true, title, message, isError, isConfirmation: false, onConfirm: null });
    const openConfirmation = (title, message, onConfirm) => setModal({ isOpen: true, title, message, isError: false, isConfirmation: true, onConfirm });
    const closeModal = () => setModal(prev => ({ ...prev, isOpen: false }));

    // ‰∫àÁ¥Ñ„Çµ„Éû„É™„ÉºÔºàÂæÖ„Å°ÁµÑÊï∞„ÄÅ‰∫∫Êï∞Ôºâ„ÇíÂèñÂæó„Åô„Çã
    const fetchSummary = useCallback(async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/waiting-summary`);
            if (!response.ok) throw new Error('Summary API fetch failed');
            const data = await response.json();
            setSummary({
                groups: data.groups || 0,
                people: data.people || 0,
            });
        } catch (error) {
            console.error("Error fetching summary:", error);
            setSummary({ groups: '„Ç®„É©„ÉºÁµÑ', people: '„Ç®„É©„Éº‰∫∫' });
        }
    }, []);

    // ‰∫àÁ¥Ñ„É™„Çπ„Éà„ÇíÂÖ®„Å¶ÂèñÂæó„Åô„Çã
    const fetchReservationList = useCallback(async () => {
        setListLoading(true);
        try {
            const response = await fetch(`${API_BASE_URL}/reservations`);
            if (!response.ok) throw new Error('Reservations API fetch failed');
            const data = await response.json();
            
            // number„ÅßÊòáÈ†Ü„ÇΩ„Éº„ÉàÔºàAPIÂÅ¥„Åß„ÇΩ„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„Åè„Å¶„ÇÇ„Åì„Åì„ÅßÂØæÂøúÔºâ
            const sortedData = data.sort((a, b) => (a.number || 99999) - (b.number || 99999));

            setReservationList(sortedData);
        } catch (error) {
            console.error("Error fetching reservation list:", error);
            openModal("„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº", `‰∫àÁ¥Ñ„É™„Çπ„Éà„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\n„Çµ„Éº„Éê„Éº„ÅÆ„É≠„Ç∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`, true);
            setReservationList([]);
        } finally {
            setListLoading(false);
        }
    }, [openModal]);

    // ÂàùÂõû„É≠„Éº„ÉâÊôÇ„Å®5Áßí„Åî„Å®„ÅÆËá™ÂãïÊõ¥Êñ∞
    useEffect(() => {
        fetchSummary();
        fetchReservationList();
        
        const summaryInterval = setInterval(fetchSummary, 5000);
        const listInterval = setInterval(fetchReservationList, 10000); // „É™„Çπ„Éà„ÅØ10Áßí„Åî„Å®

        return () => {
            clearInterval(summaryInterval);
            clearInterval(listInterval);
        };
    }, [fetchSummary, fetchReservationList]);


    // „Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥Âá¶ÁêÜ (APIÁµåÁî±)
    const changeStatus = useCallback(async (id, newStatus) => {
        // Á¢∫Ë™ç„É¢„Éº„ÉÄ„É´„ÇíË°®Á§∫
        const statusText = STATUS_MAP[newStatus] || newStatus;
        openConfirmation(
            "„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥„ÅÆÁ¢∫Ë™ç",
            `‰∫àÁ¥ÑID: ${id}\n„Çπ„ÉÜ„Éº„Çø„Çπ„Çí„Äå${statusText}„Äç„Å´Â§âÊõ¥„Åó„Åæ„Åô„ÅãÔºü`,
            async () => {
                try {
                    const response = await fetch(`${API_BASE_URL}/update-status`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-API-SECRET': API_SECRET, // „Çµ„Éº„Éê„ÉºÂÅ¥„ÅßË™çË®º„Å´‰ΩøÁî®
                        },
                        body: JSON.stringify({ id, status: newStatus }),
                    });

                    if (!response.ok) throw new Error('Status update failed');
                    
                    openModal("ÊàêÂäü", `„Çπ„ÉÜ„Éº„Çø„Çπ„Çí„Äå${statusText}„Äç„Å´Êõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ`);
                    fetchSummary();
                    fetchReservationList(); // „É™„Çπ„Éà„ÇíÂÜçÂèñÂæó„Åó„Å¶Êõ¥Êñ∞
                } catch (error) {
                    console.error("Error updating status:", error);
                    openModal("„Ç®„É©„Éº", `„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\n„Ç®„É©„Éº: ${error.message}`, true);
                }
            }
        );
    }, [openConfirmation, openModal, fetchSummary, fetchReservationList]);

    // ‰∫àÁ¥ÑÂâäÈô§Âá¶ÁêÜ (APIÁµåÁî±)
    const deleteReservation = useCallback(async (id) => {
        openConfirmation(
            "‰∫àÁ¥ÑÂâäÈô§„ÅÆÁ¢∫Ë™ç",
            `‰∫àÁ¥ÑID: ${id}\n„Åì„ÅÆ‰∫àÁ¥Ñ„ÇíÂÆåÂÖ®„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`,
            async () => {
                try {
                    const response = await fetch(`${API_BASE_URL}/delete-reservation`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-API-SECRET': API_SECRET, // „Çµ„Éº„Éê„ÉºÂÅ¥„ÅßË™çË®º„Å´‰ΩøÁî®
                        },
                        body: JSON.stringify({ id }),
                    });

                    if (!response.ok) throw new Error('Deletion failed');
                    
                    openModal("ÊàêÂäü", "‰∫àÁ¥Ñ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ");
                    fetchSummary();
                    fetchReservationList(); // „É™„Çπ„Éà„ÇíÂÜçÂèñÂæó„Åó„Å¶Êõ¥Êñ∞
                } catch (error) {
                    console.error("Error deleting reservation:", error);
                    openModal("„Ç®„É©„Éº", `‰∫àÁ¥Ñ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\n„Ç®„É©„Éº: ${error.message}`, true);
                }
            }
        );
    }, [openConfirmation, openModal, fetchSummary, fetchReservationList]);

    return (
        <div className="min-h-screen bg-gray-100 p-4 sm:p-6 lg:p-8 font-sans">
            <h1 className="text-3xl font-extrabold text-gray-900 mb-6 border-b pb-2">ÁÆ°ÁêÜÁîªÈù¢</h1>

            {/* „Çµ„Éû„É™„Éº„Ç´„Éº„Éâ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                {/* 1. ÂæÖ„Å°ÁµÑÊï∞ */}
                <div className="bg-white p-5 rounded-xl shadow-lg border-l-4 border-amber-500">
                    <p className="text-sm font-medium text-gray-500">ÂæÖ„Å°ÁµÑÊï∞</p>
                    <p className="flex items-center mt-1 text-3xl font-bold text-gray-900">
                        <Clock className="h-6 w-6 text-amber-500 mr-2" />
                        {summary.groups} ÁµÑ
                    </p>
                </div>
                {/* 2. ÂæÖ„Å°‰∫∫Êï∞ */}
                <div className="bg-white p-5 rounded-xl shadow-lg border-l-4 border-blue-500">
                    <p className="text-sm font-medium text-gray-500">ÂæÖ„Å°‰∫∫Êï∞ (ÂêàË®à)</p>
                    <p className="flex items-center mt-1 text-3xl font-bold text-gray-900">
                        <Users className="h-6 w-6 text-blue-500 mr-2" />
                        {summary.people} ‰∫∫
                    </p>
                </div>
                 {/* 3. ÊâãÂãïÊõ¥Êñ∞„Éú„Çø„É≥ */}
                 <div className="flex items-center justify-center p-5">
                    <button
                        onClick={() => { fetchSummary(); fetchReservationList(); }}
                        className="flex items-center justify-center bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition"
                        disabled={listLoading}
                    >
                        <RefreshCw className={`h-5 w-5 mr-2 ${listLoading ? 'animate-spin' : ''}`} />
                        ÊâãÂãïÊõ¥Êñ∞
                    </button>
                </div>
            </div>

            {/* ‰∫àÁ¥Ñ„É™„Çπ„Éà„ÉÜ„Éº„Éñ„É´ */}
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="p-4 bg-gray-50 border-b">
                    <h2 className="text-xl font-bold text-gray-800">ÂÖ®‰∫àÁ¥Ñ„É™„Çπ„Éà</h2>
                </div>
                <div className="overflow-x-auto">
                    <div className="min-w-full inline-block align-middle">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-100">
                                <tr>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r">No.</th>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Âõ£‰Ωì</th>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ÂêçÂâç</th>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‰∫∫Êï∞</th>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">„Çπ„ÉÜ„Éº„Çø„Çπ</th>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ÁôªÈå≤Êó•ÊôÇ</th>
                                    <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Êìç‰Ωú</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {listLoading && reservationList.length === 0 ? (
                                    <tr><td colSpan="7" className="text-center py-4 text-gray-500">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</td></tr>
                                ) : reservationList.length === 0 ? (
                                    <tr><td colSpan="7" className="text-center py-4 text-gray-500">‰∫àÁ¥Ñ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</td></tr>
                                ) : (
                                    reservationList.map(r => (
                                        <ReservationRow 
                                            key={r.id} 
                                            reservation={r} 
                                            changeStatus={changeStatus} 
                                            deleteReservation={deleteReservation}
                                        />
                                    ))
                                )}
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
            <CustomModal 
                title={modal.title} 
                message={modal.message} 
                isOpen={modal.isOpen} 
                onClose={closeModal} 
                onConfirm={modal.onConfirm}
                isConfirmation={modal.isConfirmation}
                isError={modal.isError}
            />
        </div>
    );
}

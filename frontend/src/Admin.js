import React, { useState, useEffect, useMemo, useCallback } from 'react';

// ====================================================================
// Firebase/API „Ç§„É≥„Éù„Éº„Éà
// ====================================================================
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously } from 'firebase/auth';
import { getFirestore, collection, query, onSnapshot, doc, updateDoc, orderBy } from "firebase/firestore";
import { setLogLevel } from 'firebase/firestore';

// üö® „ÄêË¶ÅÂ§âÊõ¥„Äë„ÅÇ„Å™„Åü„ÅÆRender„Çµ„Éº„Éê„Éº„ÅÆURL„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åè„Å†„Åï„ÅÑ
const API_BASE_URL = 'https://hinodefes.onrender.com';

// --------------------------------------------------------------------------------
// FirebaseË®≠ÂÆö„ÅÆË™≠„ÅøËæº„Åø
// --------------------------------------------------------------------------------
const firebaseConfig = process.env.REACT_APP_FIREBASE_CONFIG ? JSON.parse(process.env.REACT_APP_FIREBASE_CONFIG) : {};
const initialAuthToken = null;
const initialAppId = firebaseConfig.appId || 'default-app-id';

// ÁÆ°ÁêÜËÄÖ„Éà„Éº„ÇØ„É≥ (üö® „ÄêË¶ÅÂ§âÊõ¥„ÄëAdminË™çË®º„Å´‰ΩøÁî®„Åô„Çã„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„Å™„Éà„Éº„ÇØ„É≥„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åè„Å†„Åï„ÅÑ)
const ADMIN_CUSTOM_AUTH_TOKEN = "your-admin-custom-token-here";

// --------------------------------------------------------------------------------
// „Çπ„Çø„Ç§„É´ÂÆöÁæ© (Tailwind CSS„ÅÆ‰ª£„Çè„Çä„Å´„Ç§„É≥„É©„Ç§„É≥„Çπ„Çø„Ç§„É´„Çí‰ΩøÁî®)
// --------------------------------------------------------------------------------

const styles = {
    screenContainer: {
        minHeight: '100vh',
        backgroundColor: '#f3f4f6', // gray-100
        padding: '32px', // p-8
    },
    maxContainer: {
        maxWidth: '1280px', // max-w-7xl
        margin: '0 auto',
    },
    header: {
        fontSize: '32px', // text-4xl (Â∞ë„ÅóÂ∞è„Åï„ÇÅ„Å´Ë™øÊï¥)
        fontWeight: '800', // font-extrabold
        color: '#1f2937', // text-gray-900
        marginBottom: '24px', // mb-6
        borderBottom: '4px solid #f59e0b', // border-b-4 border-yellow-500
        paddingBottom: '8px', // pb-2
    },
    cardGrid: {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
        gap: '24px', // gap-6
        marginBottom: '32px', // mb-8
    },
    panel: {
        backgroundColor: 'white',
        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', // shadow-xl
        borderRadius: '12px', // rounded-xl
        padding: '24px', // p-6
    },
    listTitle: {
        fontSize: '24px', // text-2xl
        fontWeight: 'bold',
        color: '#1f2937', // text-gray-800
        marginBottom: '16px', // mb-4
        borderBottom: '1px solid #e5e7eb', // border-b
        paddingBottom: '8px', // pb-2
    },
    listItem: {
        padding: '16px', // p-4
        border: '1px solid #d1d5db', // border
        borderRadius: '8px', // rounded-lg
        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)', // shadow-sm
        backgroundColor: '#f9fafb', // bg-gray-50
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        alignItems: 'flex-start',
        marginBottom: '12px',
    },
    statusTagBase: {
        padding: '4px 12px', // px-3 py-1
        fontSize: '12px', // text-sm
        fontWeight: '600', // font-semibold
        borderRadius: '9999px', // rounded-full
        border: '1px solid',
    },
    // „Éá„Éê„ÉÉ„Ç∞ÁîªÈù¢Áî®„Çπ„Çø„Ç§„É´
    errorContainer: {
        minHeight: '100vh',
        backgroundColor: '#fef2f2', // bg-red-50
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '24px',
    },
    errorBox: {
        padding: '32px',
        backgroundColor: 'white',
        borderRadius: '12px',
        boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)', // shadow-2xl
        border: '4px solid #ef4444', // border-red-500
        maxWidth: '512px', // max-w-lg
    }
};


// --------------------------------------------------------------------------------
// „Çµ„Éñ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà („Ç§„É≥„É©„Ç§„É≥„Çπ„Çø„Ç§„É´„Å´Â§âÊèõ)
// --------------------------------------------------------------------------------

// Áµ±Ë®à„Ç´„Éº„Éâ„ÅÆ„Çµ„Éñ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const StatCard = ({ title, value, color }) => {
    let cardStyle = {
        ...styles.panel,
        padding: '16px', // p-4
        boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)', // shadow-md
        border: '1px solid #e5e7eb',
        backgroundColor: color === 'bg-white' ? 'white' : color,
    };

    return (
        <div style={cardStyle}>
            <p style={{ fontSize: '14px', fontWeight: '500', color: '#6b7280' }}>{title}</p>
            <p style={{ fontSize: '24px', fontWeight: '800', color: '#1f2937', marginTop: '4px' }}>{value}</p>
        </div>
    );
};

// „Éú„Çø„É≥„ÅÆ„Çµ„Éñ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const AdminButton = ({ onClick, color, label }) => {
    let buttonStyle = {
        padding: '4px 12px',
        fontSize: '14px',
        fontWeight: '600',
        borderRadius: '6px',
        transition: 'all 0.15s ease-in-out',
        boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
        border: 'none',
        cursor: 'pointer',
    };

    switch (color) {
        case 'blue': buttonStyle = { ...buttonStyle, backgroundColor: '#3b82f6', color: 'white' }; break;
        case 'green': buttonStyle = { ...buttonStyle, backgroundColor: '#10b981', color: 'white' }; break;
        case 'gray': buttonStyle = { ...buttonStyle, backgroundColor: '#6b7280', color: 'white' }; break;
        case 'red': buttonStyle = { ...buttonStyle, backgroundColor: '#ef4444', color: 'white' }; break;
        case 'red-outline': buttonStyle = { ...buttonStyle, border: '1px solid #ef4444', color: '#ef4444', backgroundColor: 'transparent' }; break;
        default: buttonStyle = { ...buttonStyle, backgroundColor: '#e5e7eb', color: '#374151' }; break;
    }

    // „Éõ„Éê„Éº„Ç®„Éï„Çß„ÇØ„Éà„ÅØ„Ç§„É≥„É©„Ç§„É≥„Åß„ÅØÈõ£„Åó„ÅÑ„ÅÆ„ÅßÁúÅÁï•„Åæ„Åü„ÅØÁ∞°Áï•Âåñ
    return (
        <button onClick={onClick} style={buttonStyle}>
            {label}
        </button>
    );
};


// --------------------------------------------------------------------------------
// „É°„Ç§„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
// --------------------------------------------------------------------------------

export default function Admin() {
    // ----------------------------------------------------------------
    // Áä∂ÊÖãÁÆ°ÁêÜ
    // ----------------------------------------------------------------
    const [availableCount, setAvailableCount] = useState(1);
    const [callGroup, setCallGroup] = useState('5-5');
    const [reservations, setReservations] = useState([]);
    const [salesStats, setSalesStats] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [showCompleted, setShowCompleted] = useState(true);

    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [dbInstance, setDbInstance] = useState(null);
    const [userId, setUserId] = useState(null);

    // ‰∫àÁ¥Ñ„Çπ„ÉÜ„Éº„Çø„Çπ„Å®„Ç∞„É´„Éº„Éó
    const STATUS_MAP = useMemo(() => ({
        waiting: { label: 'ÂæÖÊ©ü‰∏≠', color: '#fcd34d', bgColor: '#fffbeb', textColor: '#92400e' }, // yellow-400
        called: { label: 'Âëº„Å≥Âá∫„Åó‰∏≠', color: '#f87171', bgColor: '#fef2f2', textColor: '#991b1b' }, // red-400
        completed: { label: 'ÂÆå‰∫Ü/ÂèóÂèñÊ∏à„Åø', color: '#34d399', bgColor: '#ecfdf5', textColor: '#065f46' }, // green-400
        missed: { label: '‰∏çÂú®', color: '#9ca3af', bgColor: '#f9fafb', textColor: '#374151' }, // gray-400
        seatEnter: { label: 'ÂèóÂèñÊ∏à„Åø', color: '#34d399', bgColor: '#ecfdf5', textColor: '#065f46' },
    }), []);

    const GROUP_OPTIONS = useMemo(() => ['5-5', '5-2'], []);


    // ----------------------------------------------------------------
    // Ë™çË®º„Å®FirebaseÂàùÊúüÂåñÂá¶ÁêÜ
    // ----------------------------------------------------------------
    useEffect(() => {
        if (Object.keys(firebaseConfig).length === 0) {
            setError("Fatal Error: FirebaseË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ");
            setLoading(false);
            return;
        }

        try {
            let app;
            if (!getApps().length) {
                app = initializeApp(firebaseConfig);
                console.log("‚úÖ [Admin] Firebase App Initialized (New).");
            } else {
                app = getApp();
                console.log("‚úÖ [Admin] Firebase App Initialized (Existing).");
            }

            const authInstance = getAuth(app);
            const firestoreInstance = getFirestore(app);
            setLogLevel('debug');

            setDbInstance(firestoreInstance);

            const authenticateAdmin = async () => {
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(authInstance, initialAuthToken);
                    }
                    else if (ADMIN_CUSTOM_AUTH_TOKEN && ADMIN_CUSTOM_AUTH_TOKEN !== "your-admin-custom-token-here") {
                        await signInWithCustomToken(authInstance, ADMIN_CUSTOM_AUTH_TOKEN);
                    }
                    else {
                        await signInAnonymously(authInstance);
                    }
                } catch (authError) {
                    console.error("‚ùå Admin Auth Failed:", authError);
                    setError(`ÁÆ°ÁêÜËÄÖË™çË®º„Ç®„É©„Éº: ${authError.message}`);
                }
            };

            const unsubscribeAuth = authInstance.onAuthStateChanged((user) => {
                if (user) {
                    setUserId(user.uid);
                    setLoading(false);
                } else {
                    authenticateAdmin();
                }
            });

            return () => {
                unsubscribeAuth();
            };

        } catch (e) {
            console.error("‚ùå [Admin] Firebase Initialization Error:", e);
            setError(`FirebaseÂàùÊúüÂåñ„Ç®„É©„Éº: ${e.message}. „Éñ„É©„Ç¶„Ç∂„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
            setLoading(false);
        }
    }, []);

    // ----------------------------------------------------------------
    // „É™„Ç¢„É´„Çø„Ç§„É†„Éá„Éº„ÇøË≥ºË™≠Âá¶ÁêÜ
    // ----------------------------------------------------------------
    useEffect(() => {
        if (!dbInstance || !userId) return;

        // 1. ‰∫àÁ¥Ñ„É™„Çπ„Éà„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Ë≥ºË™≠
„ÄÄ„ÄÄ    const reservationsCollectionPath = 'reservations'; 
        const qReservations = query(
            collection(dbInstance, reservationsCollectionPath),
            orderBy('createdAt', 'desc')
        );

        const unsubscribeReservations = onSnapshot(qReservations, (snapshot) => {
            const list = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
                createdAt: doc.data().createdAt?.toDate ? doc.data().createdAt.toDate() : doc.data().createdAt,
                calledAt: doc.data().calledAt?.toDate ? doc.data().calledAt.toDate() : doc.data().calledAt,
            }));
            setReservations(list);
        }, (err) => {
            console.error("Firestore Listen Failed (Reservations):", err);
            setError(`„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº (‰∫àÁ¥Ñ): ${err.message}`);
        });

        // 2. Ë≤©Â£≤ÂÆüÁ∏æ„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Ë≥ºË™≠
        const salesStatsRef = doc(dbInstance, 'settings', 'salesStats');
        const unsubscribeSalesStats = onSnapshot(salesStatsRef, (docSnap) => {
            if (docSnap.exists()) {
                setSalesStats(docSnap.data());
            } else {
                setSalesStats({ nikuman: 0, pizaman: 0, anman: 0, chocoman: 0, oolongcha: 0 });
            }
        }, (err) => {
            console.error("Ë≤©Â£≤ÂÆüÁ∏æ„ÅÆË≥ºË™≠„Ç®„É©„Éº:", err);
            setError("Ë≤©Â£≤ÂÆüÁ∏æ„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ");
        });


        return () => {
            unsubscribeReservations();
            unsubscribeSalesStats();
        };

    }, [dbInstance, userId]);


    // ----------------------------------------------------------------
    // Ëá™ÂãïÂëº„Å≥Âá∫„ÅóÂá¶ÁêÜ
    // ----------------------------------------------------------------
    const handleCall = useCallback(async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/api/compute-call`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    availableCount: Number(availableCount),
                    apiSecret: process.env.REACT_APP_API_SECRET,
                    callGroup: callGroup,
                })
            });

            if (!response.ok) {
                throw new Error(`APIÂëº„Å≥Âá∫„Åó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${response.status}`);
            }

            const data = await response.json();
            if (data.called && data.called.length > 0) {
                alert('‰ª•‰∏ã„ÅÆÁï™Âè∑„ÇíÂëº„Å≥Âá∫„Åó„Åæ„Åó„Åü: ' + data.called.join(', '));
            } else {
                alert('Âëº„Å≥Âá∫„Åõ„Çã„Ç∞„É´„Éº„Éó„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ');
            }
        } catch (error) {
            console.error('ÂëºÂá∫„Ç®„É©„Éº:', error);
            alert('ÂëºÂá∫Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç≥„É≥„ÇΩ„Éº„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }
    }, [availableCount, callGroup]);


    // ----------------------------------------------------------------
    // ‰∫àÁ¥Ñ„ÅÆ„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥Âá¶ÁêÜ
    // ----------------------------------------------------------------
    const handleStatusChange = useCallback(async (id, currentStatus, newStatus) => {

        if (!dbInstance || !userId) return;

        const isConfirmed = window.confirm(`‰∫àÁ¥ÑÁï™Âè∑ ${reservations.find(r => r.id === id)?.number || 'N/A'} „ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Çí "${STATUS_MAP[newStatus].label}" „Å´Â§âÊõ¥„Åó„Åæ„Åô„ÅãÔºü`);
        if (!isConfirmed) return;


        if (newStatus === 'called' && currentStatus === 'waiting') {
            // APIÁµåÁî±„ÅÆÂëº„Å≥Âá∫„Åó (LINEÈÄöÁü•„ÅÆ„Åü„ÇÅ)
            try {
                const response = await fetch(`${API_BASE_URL}/api/reservations/${id}/status/${newStatus}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ apiSecret: 'YOUR_API_SECRET', userId: userId, reservationId: id })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'API„Ç®„É©„Éº');
                }
            } catch (e) {
                console.error('Failed to update status via API:', e);
                console.log(`„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${e.message}`);
            }
        } else {
            // FirestoreÁõ¥Êé•Êìç‰Ωú
            try {
                const collectionPath = 'reservations';
                await updateDoc(doc(dbInstance, collectionPath, id), {
                    status: newStatus,
                    updatedAt: new Date(),
                });
            } catch (e) {
                console.error('Failed to update status directly:', e);
                console.log(`„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${e.message}`);
            }
        }
    }, [dbInstance, userId, reservations, STATUS_MAP]); // initialAppId„Å∏„ÅÆ‰æùÂ≠ò„ÇíÂâäÈô§



    // ----------------------------------------------------------------
    // ‰∫àÁ¥Ñ„ÅÆÂâäÈô§Âá¶ÁêÜ
    // ----------------------------------------------------------------
    const handleDelete = useCallback(async (id) => {
        if (!window.confirm("„Åì„ÅÆ‰∫àÁ¥Ñ„ÇíÂÆåÂÖ®„Å´ÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü")) return;

        try {
            const response = await fetch(`${API_BASE_URL}/api/reservations/${id}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ apiSecret: 'YOUR_API_SECRET' })
            });

            if (!response.ok) {
                throw new Error('ÂâäÈô§API„Ç®„É©„Éº');
            }
        } catch (e) {
            console.error('Failed to delete reservation:', e);
            console.log(`ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${e.message}`);
        }
    }, []);

    // ----------------------------------------------------------------
    // ‰∫àÁ¥ÑÁä∂Ê≥Å„ÅÆ„Çµ„Éû„É™„ÉºË®àÁÆó
    // ----------------------------------------------------------------
    const summary = useMemo(() => {
        const s = {
            total: 0,
            waiting: 0,
            called: 0,
            groups: {}
        };
        GROUP_OPTIONS.forEach(g => s.groups[g] = { total: 0, waiting: 0 });

        reservations.forEach(r => {
            s.total++;
            s.groups[r.group] && s.groups[r.group].total++;
            if (r.status === 'waiting') {
                s.waiting++;
                s.groups[r.group] && s.groups[r.group].waiting++;
            }
            if (r.status === 'called') {
                s.called++;
            }
        });
        return s;
    }, [reservations, GROUP_OPTIONS]);

    // ----------------------------------------------------------------
    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Å®„ÇΩ„Éº„Éà
    // ----------------------------------------------------------------
    const filteredAndSortedReservations = useMemo(() => {
        const TEN_MINUTES_MS = 10 * 60 * 1000;
        const now = new Date();

        const getStatusPriority = (r) => {
            if (r.status === 'called') {
                const calledAtTime = r.calledAt ? new Date(r.calledAt).getTime() : 0;
                return (now.getTime() - calledAtTime) > TEN_MINUTES_MS ? 2 : 1;
            }
            if (r.status === 'waiting') return 3;
            if (r.status === 'completed' || r.status === 'seatEnter') return 4;
            return 5;
        };

        return reservations
            .filter(r => {
                const isCompleted = r.status === 'completed' || r.status === 'seatEnter';
                if (!showCompleted && isCompleted) return false;

                if (searchTerm === '') return true;

                const number = String(r.number || '');
                const name = r.name || '';
                return number.toLowerCase().includes(searchTerm.toLowerCase()) || name.toLowerCase().includes(searchTerm.toLowerCase());
            })
            .sort((a, b) => {
                const priorityA = getStatusPriority(a);
                const priorityB = getStatusPriority(b);
                if (priorityA !== priorityB) {
                    return priorityA - priorityB;
                }
                const timeA = a.createdAt ? new Date(a.createdAt).getTime() : 0;
                const timeB = b.createdAt ? new Date(b.createdAt).getTime() : 0;
                return timeA - timeB;
            });
    }, [reservations, searchTerm, showCompleted]);


    // ----------------------------------------------------------------
    // „É¨„É≥„ÉÄ„É™„É≥„Ç∞
    // ----------------------------------------------------------------
    if (loading) {
        return (
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minHeight: '100vh', backgroundColor: '#f9fafb' }}>
                <p style={{ fontSize: '20px', color: '#4b5563' }}>ÁÆ°ÁêÜÁîªÈù¢„Çí„É≠„Éº„Éâ‰∏≠...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div style={styles.errorContainer}>
                <div style={styles.errorBox}>
                    <h1 style={{ fontSize: '24px', fontWeight: '800', color: '#dc2626', marginBottom: '16px' }}>Ëá¥ÂëΩÁöÑ„Å™„Ç®„É©„Éº</h1>
                    <p style={{ color: '#374151' }}>{error}</p>
                    <p style={{ marginTop: '16px', fontSize: '12px', color: '#6b7280' }}>ÈñãÁô∫ËÄÖÂêë„ÅëÊÉÖÂ†±: Ë™çË®º„É¶„Éº„Ç∂„ÉºID = {userId || 'N/A'}</p>
                    <p style={{ fontSize: '12px', color: '#6b7280' }}>App ID = {initialAppId}</p>
                </div>
            </div>
        );
    }


    return (
        <div style={styles.screenContainer}>
            <div style={styles.maxContainer}>
                <h1 style={styles.header}>
                    üçΩÔ∏è ‰∫àÁ¥Ñ„ÉªË≤©Â£≤ÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
                </h1>
                <p style={{ fontSize: '14px', color: '#4b5563', marginBottom: '16px' }}>„É¶„Éº„Ç∂„ÉºID: {userId || 'Êú™Ë™çË®º'}</p>

                {/* Ëá™ÂãïÂëº„Å≥Âá∫„Åó & Ë≤©Â£≤ÂÆüÁ∏æ */}
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '24px', marginBottom: '32px' }}>
                    {/* Ëá™ÂãïÂëº„Å≥Âá∫„Åó„Éë„Éç„É´ */}
                    <div style={{ ...styles.panel, borderLeft: '4px solid #3b82f6' }}>
                        <h2 style={{ fontSize: '20px', fontWeight: 'bold', color: '#1f2937', marginBottom: '16px', borderBottom: '1px solid #e5e7eb', paddingBottom: '8px' }}>Ëá™ÂãïÂëº„Å≥Âá∫„Åó</h2>
                        <div style={{ marginBottom: '16px' }}>
                            <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '4px' }}>Âëº„Å≥Âá∫„ÅóÂØæË±°„ÅÆÂõ£‰Ωì:</label>
                            <select
                                value={callGroup}
                                onChange={(e) => setCallGroup(e.target.value)}
                                style={{ display: 'block', width: '100%', borderRadius: '6px', border: '1px solid #d1d5db', padding: '8px' }}
                            >
                                {GROUP_OPTIONS.map(group => (
                                    <option key={group} value={group}>{`Âõ£‰Ωì ${group}`}</option>
                                ))}
                            </select>
                        </div>

                        <div style={{ marginBottom: '24px' }}>
                            <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#374151', marginBottom: '4px' }}>ÂÆåÊàêÂÄãÊï∞Ôºö</label>
                            <input
                                type="number"
                                value={availableCount}
                                onChange={(e) => setAvailableCount(e.target.value)}
                                min={0}
                                style={{ display: 'block', width: '100%', borderRadius: '6px', border: '1px solid #d1d5db', padding: '8px' }}
                            />
                        </div>

                        <button
                            onClick={handleCall}
                            style={{ width: '100%', padding: '10px 16px', backgroundColor: '#2563eb', color: 'white', fontWeight: '600', borderRadius: '8px', border: 'none', cursor: 'pointer' }}
                        >
                            üì¢ ÂëºÂá∫ÂÆüË°å (APIÁµåÁî±)
                        </button>
                    </div>

                    {/* Ë≤©Â£≤ÂÆüÁ∏æ„Éë„Éç„É´ */}
                    <div style={{ ...styles.panel, borderLeft: '4px solid #10b981' }}>
                        <h2 style={{ fontSize: '20px', fontWeight: 'bold', color: '#1f2937', marginBottom: '16px', borderBottom: '1px solid #e5e7eb', paddingBottom: '8px' }}>Ë≤©Â£≤ÂÆüÁ∏æ („É™„Ç¢„É´„Çø„Ç§„É†)</h2>
                        {salesStats === null ? (
                            <p style={{ color: '#6b7280' }}>Ë™≠„ÅøËæº„Åø‰∏≠...</p>
                        ) : (
                            <ul style={{ padding: 0, margin: 0, listStyle: 'none' }}>
                                {Object.entries(salesStats).map(([key, value]) => {
                                    const itemName = {
                                        nikuman: 'ËÇâ„Åæ„Çì', pizaman: '„Éî„Ç∂„Åæ„Çì', anman: '„ÅÇ„Çì„Åæ„Çì',
                                        chocoman: '„ÉÅ„Éß„Ç≥„Åæ„Çì', oolongcha: 'ÁÉèÈæçËå∂'
                                    }[key] || key;
                                    const unit = key === 'oolongcha' ? 'Êú¨' : 'ÂÄã';
                                    return (
                                        <li key={key} style={{ color: '#374151', marginBottom: '8px' }}>
                                            {itemName}: <strong style={{ fontSize: '18px', color: '#047857' }}>{value || 0}</strong> {unit}
                                        </li>
                                    );
                                })}
                            </ul>
                        )}
                    </div>
                </div>


                {/* Áµ±Ë®à„Çµ„Éû„É™„Éº„Ç´„Éº„Éâ */}
                <div style={styles.cardGrid}>
                    <StatCard title="ÂêàË®à‰∫àÁ¥ÑÊï∞" value={summary.total} color="white" />
                    <StatCard title="ÂæÖÊ©ü‰∏≠„Ç∞„É´„Éº„Éó" value={summary.waiting} color="#fde68a" /> {/* yellow-200 */}
                    <StatCard title="Âëº„Å≥Âá∫„Åó‰∏≠„Ç∞„É´„Éº„Éó" value={summary.called} color="#fecaca" /> {/* red-200 */}
                    <StatCard
                        title="5-5 ÂæÖÊ©ü"
                        value={`${summary.groups['5-5'] ? summary.groups['5-5'].waiting : 0} „Ç∞„É´„Éº„Éó`}
                        color="#e0e7ff" /> {/* indigo-100 */}
                    <StatCard
                        title="5-2 ÂæÖÊ©ü"
                        value={`${summary.groups['5-2'] ? summary.groups['5-2'].waiting : 0} „Ç∞„É´„Éº„Éó`}
                        color="#fce7f3" /> {/* pink-100 */}
                </div>

                {/* ‰∫àÁ¥Ñ„É™„Çπ„Éà */}
                <div style={styles.panel}>
                    <h2 style={styles.listTitle}>‰∫àÁ¥Ñ„É™„Çπ„Éà ({filteredAndSortedReservations.length}‰ª∂ / ÂÖ®{reservations.length}‰ª∂)</h2>

                    {/* Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„Éº */}
                    <div style={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center', gap: '16px', marginBottom: '24px' }}>
                        <input
                            type="text"
                            placeholder="Áï™Âè∑ or ÂêçÂâç„ÅßÊ§úÁ¥¢..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            style={{ flexGrow: 1, minWidth: '200px', padding: '8px', border: '1px solid #d1d5db', borderRadius: '6px', boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)' }}
                        />
                        <label style={{ display: 'flex', alignItems: 'center', fontSize: '14px', color: '#374151', fontWeight: '500' }}>
                            <input
                                type="checkbox"
                                checked={showCompleted}
                                onChange={(e) => setShowCompleted(e.target.checked)}
                                style={{ marginRight: '8px', width: '16px', height: '16px' }}
                            />
                            <span>ÂÆå‰∫Ü/ÂèóÂèñÊ∏à„Åø„ÇíË°®Á§∫</span>
                        </label>
                    </div>

                    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                        {filteredAndSortedReservations.length === 0 ? (
                            <p style={{ color: '#6b7280', textAlign: 'center', padding: '40px 0' }}>Ë©≤ÂΩì„Åô„Çã‰∫àÁ¥Ñ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</p>
                        ) : (
                            filteredAndSortedReservations.map((r) => {
                                const statusInfo = STATUS_MAP[r.status] || STATUS_MAP.missed;
                                const isWaiting = r.status === 'waiting';
                                const isCalled = r.status === 'called';
                                const isOvertime = isCalled && r.calledAt && (new Date().getTime() - new Date(r.calledAt).getTime()) > (10 * 60 * 1000);

                                const itemNames = { nikuman: 'ËÇâ', pizaman: '„Éî„Ç∂', anman: '„ÅÇ„Çì', chocoman: '„ÉÅ„Éß„Ç≥', oolongcha: 'Ëå∂' };
                                const orderSummary = r.items ? Object.entries(r.items).filter(([, v]) => v > 0).map(([k, v]) => `${itemNames[k] || k}:${v}`).join(', ') : 'ÊÉÖÂ†±„Å™„Åó';

                                return (
                                    <div
                                        key={r.id}
                                        style={{
                                            ...styles.listItem,
                                            backgroundColor: isOvertime ? '#fef2f2' : '#f9fafb', // bg-red-50 vs bg-gray-50
                                            border: `1px solid ${isOvertime ? statusInfo.color : '#d1d5db'}`,
                                        }}
                                    >
                                        {/* ‰∫àÁ¥ÑÊÉÖÂ†± */}
                                        <div style={{ flex: 1, minWidth: 0, width: '100%' }}>
                                            <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '4px' }}>
                                                <span
                                                    style={{
                                                        ...styles.statusTagBase,
                                                        backgroundColor: statusInfo.bgColor,
                                                        color: statusInfo.textColor,
                                                        borderColor: statusInfo.color,
                                                    }}
                                                >
                                                    {statusInfo.label}{isOvertime && ' (10ÂàÜË∂ÖÈÅé)'}
                                                </span>
                                                <span style={{ fontSize: '18px', fontWeight: '800', color: '#1f2937' }}>
                                                    Áï™Âè∑: {r.number}
                                                </span>
                                            </div>
                                            <p style={{ fontSize: '16px', color: '#374151', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                                                <span style={{ fontWeight: '600' }}>„Ç∞„É´„Éº„Éó:</span> {r.group} / <span style={{ fontWeight: '600' }}>‰∫∫Êï∞:</span> {r.people}Âêç / <span style={{ fontWeight: '600' }}>ÂêàË®à:</span> {r.totalCost?.toLocaleString() || 'N/A'}ÂÜÜ
                                            </p>
                                            <p style={{ fontSize: '14px', color: '#4b5563', marginTop: '2px', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>
                                                <span style={{ fontWeight: '600' }}>Ê≥®Êñá:</span> {orderSummary}
                                            </p>
                                            <p style={{ fontSize: '12px', color: '#6b7280', marginTop: '4px' }}>
                                                Âèó‰ªò: {r.createdAt ? new Date(r.createdAt).toLocaleTimeString('ja-JP') : 'N/A'}
                                                {r.lineUserId && (
                                                    <span style={{ marginLeft: '12px', color: '#3b82f6', fontWeight: '500' }}> (LINEÈÄöÁü•Â∏åÊúõ)</span>
                                                )}
                                                {r.name && (
                                                    <span style={{ marginLeft: '12px', color: '#6b7280', fontWeight: '500' }}> Ê∞èÂêç: {r.name}</span>
                                                )}
                                            </p>
                                        </div>

                                        {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
                                        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px', marginTop: '12px' }}>
                                            {isWaiting && (
                                                <AdminButton
                                                    onClick={() => handleStatusChange(r.id, 'waiting', 'called')}
                                                    color="red"
                                                    label="üì¢ Âëº„Å≥Âá∫„Åó"
                                                />
                                            )}
                                            {isCalled && (
                                                <>
                                                    <AdminButton
                                                        onClick={() => handleStatusChange(r.id, 'called', 'completed')}
                                                        color="green"
                                                        label="‚úÖ ÂÆå‰∫Ü/ÂèóÂèñ"
                                                    />
                                                    <AdminButton
                                                        onClick={() => handleStatusChange(r.id, 'called', 'missed')}
                                                        color="gray"
                                                        label="‚ùå ‰∏çÂú®"
                                                    />
                                                </>
                                            )}
                                            {r.status !== 'waiting' && (
                                                <AdminButton
                                                    onClick={() => handleStatusChange(r.id, r.status, 'waiting')}
                                                    color="blue"
                                                    label="‚Ü©Ô∏è ÂæÖÊ©ü„Å∏Êàª„Åô"
                                                />
                                            )}
                                            <AdminButton
                                                onClick={() => handleDelete(r.id)}
                                                color="red-outline"
                                                label="üóëÔ∏è ÂâäÈô§"
                                            />
                                        </div>
                                    </div>
                                );
                            })
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}
